---
title: Property Reference
owner: Ops Manager
---


This topic explains how PCF Tiles describe properties.

## <a id='expressions'></a>Double-Parentheses Expressions

The product template `.yml` file in a tile's `metadata` subdirectory defines how the tile interface collects configurable properties from the user, and how Ops Manager incorporates these properties into the deployment manifest that it creates.

The product template contains `manifest` snippets in both the `form_types` section that defines the tile interface, and the `job_types` section describing the jobs that the manifest deploys. Within these snippets, you can use special expressions to include property values that are otherwise not known ahead of time, such as configurable properties or system properties:

* Double-parentheses expressions designate property values that Ops Manager fills in when it generates the deployment manifest, after the user clicks **Apply Changes**. These values include configurable properties and properties supplied by Ops Manager.

* Triple-parentheses expressions designate property values that BOSH supplies when it deploys instances of the tile service, such as CredHub credentials.

### <a id='property-refs'></a>Referencing Properties

Evaluating a property can be represented by piecing two segments together:

* The location of the property
* What information from the property you are looking to access, or _accessors_

Together, the double-parentheses expression can be written as:

```
(( LOCATION_OF_PROPERTY.ACCESSOR ))
```

The method of referencing the location of the property varies. Here is a complete list of ways to reference a property with some help text to indicate the situation.

<table class="nice"><tr>
   <td>.properties.top_level_property</td>
   <td>Refers to the property blueprint whose name is "top_level_property" found in the global list of properties of the same product
   </tr><tr>
   <td>.job_one.job_level_property</td>
   <td>Refers to the property blueprint whose name is "job_level_property" found in the list of properties of the job "job_one" of the same product</td>
   </tr><tr>
   <td>job_level_property</td>
   <td>Refers to the property blueprint whose name is "top_level_property" found in the same product and job whose manifest is currently being evaluated</td>
   </tr><tr>
   <td>..other_product.properties.top_level_property</td>
   <td>Refers to the property blueprint whose name is "top_level_property" found in the global list of properties of the product "other_product"</td>
   </tr><tr>
   <td>..other_product.job_two.job_level_property</td>
   <td>Refers to the property blueprint whose name is "job_level_property" found in the list of properties of the job "job_one" of the product "other_product"</td>
   </tr>
</table>

Accessors vary between property blueprint types. See the [Property Blueprint Reference](#property-blueprints) for available properties and their accessors.

The following example uses the property blueprint type `string` with its one accessor, `value`. A valid double-parentheses expression to access the value of this property (assuming it is top-level, and has the name `example-string`) would look like:

```
(( .properties.example-string.value ))
```

Ops Manager allows empty arrays in double-parentheses expressions. For example:

```
(( .properties.example-string.value || [] ))
```

### <a id='dollar'></a>Dollar Contexts

Outside of properties, you can also retrieve information about various configuration details of your product and Ops Manager.

* $ops\_manager: used by any product to obtain information about specific OpsManager
* $director: used by any product to obtain information about the Director
* $runtime: used by any product to obtain information about the CF tile (Pivotal Application Service)
* $self: used by your own product to obtain information about your product's configuration

#### $ops\_manager

<table class="nice"><tr>
  <td>ca_certificate</td>
  <td>Provides the root CA cert that is used to sign the Director VM</td>
  </tr><tr>
  <td>trusted_certificates</td>
  <td>Provides a list of certificates that are applied by the Director to all VMs</td>
  </tr><tr>
  <td>http_proxy</td>
  <td>Provides the comma separated values that are entered if Ops Manager traffic is directed to an HTTP Proxy</td>
  </tr><tr>
  <td>https_proxy</td>
  <td>Provides the comma separated values that are entered if Ops Manager traffic is directed to an HTTPS Proxy</td>
  </tr><tr>
  <td>no_proxy</td>
  <td>Provides the comma separated values that should not go through a proxy</td></tr>
  <td>dns_enabled</td>
  <td>Provides boolean flag indicating if BOSH DNS is enabled</td>
</tr>
</table>

#### $director

<table class="nice"><tr>
  <td>deployment_ip</td>
  <td>Provides the IP address that the BOSH Director is deployed on</td>
  </tr><tr>
  <td>username</td>
  <td>Provides the username for the Director VM</td>
  </tr>
  <tr>
  <td>password</td><td>Provides the password for the Director VM</td>
  </tr>
  <tr>
  <td>ntp_servers</td><td>Provides a list of ntp servers that are deployed by the Director</td>
  </tr>
  <tr>
  <td>ca_public_key</td>
  <td>Provides the public key that is used to sign the Director VM</td>
  </tr>
  <tr>
  <td>hostname</td>
  <td>Provides the hostname for the Director VM</td>
  </tr>
  <tr>
  <td>tld</td>
  <td>Returns the string <code>bosh</code> as the top-level domain (TLD) of the BOSH Director</td>
  </tr>
  <tr>
  <td>bosh_metrics_forwarder_client_name</td>
  <td>Provides the BOSH Metrics Forwarder client name</td>
  </tr>
  <tr>
  <td>bosh_metrics_forwarder_client_secret</td>
  <td>Provides the BOSH Metrics Forwarder client secret</td>
  </tr>
  <tr>
  <td>dns_release_present</td>
  <td>Exposes the Director configuration for <code>disable_dns_release</code></td>
</tr>
</table>

<p class="note"><strong>Note</strong>: Support for the <code>$director.username</code> and <code>$director.password</code> accessors will be removed in future versions of Ops Manager.</p>

#### $runtime

<table class="nice"><tr>
  <td>system_domain</td>
  <td>Provides domain for system-level PCF components, such as the API, UAA, or Apps Manager.</td>
  </tr><tr>
  <td>apps_domain</td>
  <td>Provides the default domain used by applications</td>
  </tr><tr>
  <td>system_api_url</td>
  <td>Provides the url to the PCF API component</td>
  </tr><tr>
  <td>login_url</td>
  <td>Provides the url to authenticate with the PCF components</td>
  </tr><tr>
  <td>uaa_url</td>
  <td>Provides the url to the PCF UAA component</td>
  </tr><tr>
  <td>console_url</td>
  <td>Provides the url to the PCF Apps Manager component</td>
  </tr><tr>
  <td>default_reply_to</td>
  <td>Provides the default reply-to email address for the system domain</td>
  </tr><tr>
  <td>default_from</td>
  <td>Provides the default from email address of the system domain</td>
  </tr>
</table>

#### $self

<table class="nice"><tr>
  <td>uaa_client_name</td>
  <td>Provides the UAA client name created for your Product to communicate with the BOSH Director</td>
  </tr><tr>
  <td>uaa_client_secret</td>
  <td>Provides the UAA client secret created for your Product to communicate with the BOSH Director</td>
  </tr><tr>
  <td>service_network</td>
  <td>Provides the name of the service network that has been assigned to your product</td>
  </tr><tr>
  <td>stemcell_version</td>
  <td>Provides the stemcell version that is being used by your product</td>
  </tr>
</table>

## <a id='property-blueprints'></a>Property Reference Guide

Below is a reference to every property blueprint type.

### <a id='common-attributes'></a>Common property blueprint attributes

All property blueprints may have the following attributes:

<table class="nice">
  <tr>
    <td>name</td>
    <td>
      Required. The name of the property.  The name is used to reference a property in <code>form_types</code> and in <code>(( ))</code> accessors.
    </td>
  </tr>
  <tr>
    <td>
      type
    </td>
    <td>
      Required. The type of property. Must be one of the property types listed in this documentation.
    </td>
  <tr>
    <td>
      optional
    </td>
    <td>
      Optional. Default: false. When set to true, OpsManager will not require this property to be set in order to deploy, nor will it validate that this field has a value when saving a form with this property.
      <br/>
      <br/>
      <code>optional</code> cannot be set to true if a <code>default</code> value is set (see documentation below for which types support <code>default</code>).
      <br/>
      <br/>
      <code>optional</code> cannot be set to true if the property also has <code>configurable: false</code>.
    </td>
  </tr>
  <tr>
    <td>
      configurable
    </td>
    <td>
      Optional. Default: false.
      <br/>
      <br/>
      When true, for property types which support operator configuration, the operator will be allowed to configure this value.
      Please do not set <code>configurable: true</code> for property types which do not support operator configuration.
      <br/>
      <br/>
      When set to false, OpsManager will not render this property in any form, even if it's specified in a <code>form_type</code>,
      nor will it allow the property to be updated via the API.
      For property types which support auto-generation of values, when <code>configurable</code> is false,
      OpsManager will generate and save a value for this property when the product to which this property belongs is deployed for the first time.
    </td>
  </tr>
  <tr>
    <td>
      freeze_on_deploy
    </td>
    <td>
      Optional. Default: false.  When set to true, OpsManager will not allow this property to be changed after the product this property belongs to is successfully deployed.
    </td>
  </td>
</table>

### <a id='configurable-and-auto-generated'></a>Configurable and Auto-Generated Properties

When a property has `configurable: true` and is added to a `form_type` then the operator will be able to configure
the value of that property.  Alternatively, a property can have `configurable: false` and will have a value auto-generated
by OpsManager.  See below for which property types support each of these usages.

Properties with `configurable` set to `false`:
  - cannot be edited by the operator
  - will not show up in forms, even if added under `form_types`
  - will have auto-generated values filled in by OpsManager if that specific type of property supports auto-generation of values.

### <a id='named-manifest'></a> named_manifest for selector and collection type properties

Specify a property for collection within the `named_manifest` section of the metadata.

The following example uses a named manifest called `for_routing` that belongs to the `certificate_collection` job:

<pre>
- name: certificate_collection
  type: collection
  configurable: true
  property_blueprints:
    - name: some_cert_name
      type: string
    - name: some_cert
      type: rsa_cert_credentials
  named_manifests:
  - name: for_routing
    manifest: |
      name:  (( current_record.some_cert_name.value ))
      private_key:  (( current_record.some_cert.private_key_pem ))
      public_key:  (( current_record.some_cert.public_key_pem ))
      certificate: (( current_record.some_cert.cert_pem ))
</pre>

Use the `current_record` property within a collection record to refer to other properties in the same record.
For example, the properties in the `for_routing` named manifest refer to the values for `name`, `private_key`, `public_key`, and `certificate` within this record only.

<p class="note"><strong>Note:</strong> The <code>current_record</code> property is reserved. You cannot create a new property named <code>current_record</code>.</p>

After defining a named manifest, you can reference it using a manifest snippet in the following format:

```
routing_certificates: (( .properties.certificate_collection.parsed_manifest(for_routing) ))
```

Ops Manager renders the following manifest from this example:

<pre>
routing_certificates:
  - name: foo_cert
    private_key: PRIVATE-KEY
    public_key: PUBLIC-KEY
    certificate: CERTIFICATE
  - name: bar_cert
    private_key: PRIVATE-KEY
    public_key: PUBLIC-KEY
    certificate: CERTIFICATE
</pre>

For more information, see the sections below about Selector and Collection types.


### <a id='all-property-types'></a>All Property Blueprint Types

### <a id='boolean'></a>boolean
<%= partial 'tile-reference/property-blueprints/boolean' %>

### <a id='ca-certificate'></a>ca\_certificate
<%= partial 'tile-reference/property-blueprints/ca-certificate' %>

### <a id='collection'></a>collection
<%= partial 'tile-reference/property-blueprints/collection' %>

### <a id='disk-type-dropdown'></a>disk\_type\_dropdown
<%= partial 'tile-reference/property-blueprints/disk-type-dropdown' %>

### <a id='domain'></a>domain
<%= partial 'tile-reference/property-blueprints/domain' %>

### <a id='dropdown-select'></a>dropdown\_select
<%= partial 'tile-reference/property-blueprints/dropdown-select' %>

### <a id='email'></a>email
<%= partial 'tile-reference/property-blueprints/email' %>

### <a id='http-url'></a>http\_url
<%= partial 'tile-reference/property-blueprints/http-url' %>

### <a id='integer'></a>integer
<%= partial 'tile-reference/property-blueprints/integer' %>

### <a id='ip-address'></a>ip\_address
<%= partial 'tile-reference/property-blueprints/ip-address' %>

### <a id='ip-ranges'></a>ip\_ranges
<%= partial 'tile-reference/property-blueprints/ip-ranges' %>

### <a id='ldap-url'></a>ldap\_url
<%= partial 'tile-reference/property-blueprints/ldap-url' %>

### <a id='multi-select-options'></a>multi\_select\_options
<%= partial 'tile-reference/property-blueprints/multi-select-options' %>

### <a id='network-address'></a>network\_address
<%= partial 'tile-reference/property-blueprints/network-address' %>

### <a id='network-address-list'></a>network\_address\_list
<%= partial 'tile-reference/property-blueprints/network-address-list' %>

### <a id='port'></a>port
<%= partial 'tile-reference/property-blueprints/port' %>

### <a id='rsa-cert-credential'></a>rsa\_cert\_credentials
<%= partial 'tile-reference/property-blueprints/rsa-cert-credentials' %>

### <a id='rsa-pkey-credential'></a>rsa\_pkey\_credentials
<%= partial 'tile-reference/property-blueprints/rsa-pkey-credentials' %>

### <a id='salted-credentials'></a>salted\_credentials
<%= partial 'tile-reference/property-blueprints/salted-credentials' %>

### <a id='secret'></a>secret
<%= partial 'tile-reference/property-blueprints/secret' %>

### <a id='selector'></a>selector
<%= partial 'tile-reference/property-blueprints/selector' %>

### <a id='service-network-az-multi-select'></a>service\_network\_az\_multi\_select
<%= partial 'tile-reference/property-blueprints/service-network-az-multi-select' %>

### <a id='service-network-az-single-select'></a>service\_network\_az\_single\_select
<%= partial 'tile-reference/property-blueprints/service-network-az-single-select' %>

### <a id='simple-credentials'></a>simple\_credentials
<%= partial 'tile-reference/property-blueprints/simple-credentials' %>

### <a id='smtp-authentication'></a>smtp\_authentication
<%= partial 'tile-reference/property-blueprints/smtp-authentication' %>

### <a id='string-list'></a>string\_list
<%= partial 'tile-reference/property-blueprints/string-list' %>

### <a id='string'></a>string
<%= partial 'tile-reference/property-blueprints/string' %>

### <a id='text'></a>text
<%= partial 'tile-reference/property-blueprints/text' %>

### <a id='uuid'></a>uuid
<%= partial 'tile-reference/property-blueprints/uuid' %>

### <a id='vm-type-drowdown'></a>vm\_type\_dropdown
<%= partial 'tile-reference/property-blueprints/vm-type-dropdown' %>

### <a id='wildcard-domain'></a>wildcard\_domain
<%= partial 'tile-reference/property-blueprints/wildcard-domain' %>

### <a id='using-provided-examples'></a>Using the Examples Provided

Each example can be copied into the following `metadata.yml` skeleton and packaged together along with the [`os-conf`](https://github.com/cloudfoundry/os-conf-release/releases) release as a `.pivotal` file to make a working tile.

```
---
name: p-example
label: Example Tile
description: An example tile
product_version: '1.1'
minimum_version_for_upgrade: '1.0'
metadata_version: '2.2'
rank: 1

stemcell_criteria:
  os: ubuntu-trusty
  version: '3586.24'

releases:
  - name: os-conf
    file: os-conf
    version: '15'

# a base 64 encoded PNG with a teal square
icon_image: iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAADElEQVQI12NgaC8BAAGGAPwUz8ygAAAAAElFTkSuQmCC

includes: # This top-level key will be ignored by OpsManager.
  # This anchor here is only to make the examples below more terse, and is not required.
  job_type_boilerplate: &job_type_boilerplate
    max_in_flight: 1
    single_az_only: true
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1


# end of boilerplate
# paste the property example here
```
